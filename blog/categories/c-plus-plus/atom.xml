<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C++ | Luc Hermitte's Blog]]></title>
  <link href="http://LucHermitte.github.io/blog/categories/c-plus-plus/atom.xml" rel="self"/>
  <link href="http://LucHermitte.github.io/"/>
  <updated>2014-05-24T14:42:08+02:00</updated>
  <id>http://LucHermitte.github.io/</id>
  <author>
    <name><![CDATA[Luc Hermitte]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Programmation Par Contrat 1/3 -- Un Peu De Théorie]]></title>
    <link href="http://LucHermitte.github.io/blog/2014/05/24/programmation-par-contrat-un-peu-de-theorie/"/>
    <updated>2014-05-24T02:00:00+02:00</updated>
    <id>http://LucHermitte.github.io/blog/2014/05/24/programmation-par-contrat-un-peu-de-theorie</id>
    <content type="html"><![CDATA[<p>Cela faisait un moment que je voulais partager mes conclusions sur la
<em>Programmation par Contrat</em>, et en particulier comment l'appliquer au C++.</p>

<p>Voici un premier billet qui aborde l'aspect théorique. Dans un <a href="#">second billet</a>,
je traiterai des <em>assertions</em>. En guise de conclusion, je présenterai des
<a href="#">techniques d'application de la PpC au C++</a>
que j'ai croisées au fil des ans.</p>

<h2>I- Les Erreurs</h2>

<p>En développement, il y a toujours des problèmes qui vont venir nous ennuyer.
Certains correspondront à des problèmes plausibles induits par le contexte
(fichiers invalides, connexions réseau coupées, utilisateurs qui saisissent
n'importe quoi, &hellip;), d'autres seront des <em>erreurs de programmation</em>.</p>

<p>Dans la suite de ce billet, je vais principalement traiter du cas des erreurs
de programmation. Toutefois, la confusion étant facile, des parenthèses
régulières seront faites sur les situations exceptionnelles mais plausibles.</p>

<h3>I-1. Les types d'erreurs de programmation</h3>

<p>Quand on parle d'erreur de programmation, les premières qui vont nous venir à
l'esprit sont les erreurs de syntaxe (point-virgule oublié), ou de grammaire
(types non respectés). Ces erreurs-ci, les langages compilés vont nous les
signaler. On peut considérer qu'il est impossible de livrer un exécutable sur
une plateforme qui n'a pas passé cette phase de vérification.</p>

<p>Il existe de nombreuses autres erreurs de programmation qu'aucun compilateur ne
signalera jamais. On peut se tromper dans la conception ou la retranscription
d'un algorithme, et ainsi renvoyer des résultats numériques aberrants. On peut
aussi faire des suppositions totalement erronées, comme traiter les lignes d'un
fichier qui n'existe pas, ou exploiter un élément après sa recherche
infructueuse dans une liste, &hellip; Les plus classiques sont les accès
hors bornes, et tous les autres problèmes de déréférencement de pointeur nul
et de <a href="http://en.wikipedia.org/wiki/Dangling_pointer"><em>dangling pointer</em></a>.</p>

<p>Bien sûr, un fichier qui n'existe pas est une erreur de contexte. Mais
réaliser un traitement sur un fichier sans vérifier préalablement qu'il existe
est une erreur de programmation. La différence est subtile. J'y reviendrai plus
<a href="#ProgrammationDefensive">loin</a>.</p>

<h3>I-2. Que faire de ces erreurs de programmation ?</h3>

<p>Les erreurs qui bloquent la compilation, on n'a pas trop d'autre choix que de
les corriger. Les autres erreurs &hellip; souvent, pas grand chose n'en est fait.
Elles sont là, elles trainent jusqu'à ce qu'elles soient trouvées, puis
corrigées. Les pires d'entre-elles ne sont jamais détectées. C'est souvent le
cas des erreurs numériques, ou des fichiers que l'on croit avoir ouverts.</p>

<p>Dans les meilleurs de mes mondes, on fait en sorte de ne pas pouvoir compiler
quand on est face à une erreur de programmation. Les assertions statiques nous
aideront en cela.<br/>
On peut aussi appliquer des petites recettes dont le principe chapeau consiste
à confier nos invariants au compilateur. Par exemple, on évite de disposer de
variables dans des états non pertinents (FAQ C++ dvpz), on utilise des
références à la place de pointeurs quand on sait que l'on est censés disposer
de <em>liens</em> non nuls, on annote comme <strong>transférables</strong> les types dont les
responsables changent (<em>cf.</em> un prochain billet), on fait en sorte de ne pas
pouvoir additionner des distances avec des masses (<em>cf.</em>
<a href="http://boost.org/libs/units">boost.unit</a>), &hellip;</p>

<p>Pour les autres cas, <a href="#Meyer1988">[Meyer1988]</a> a jeté les bases d'un outil, la
<em>programmation par contrat</em>. Le C nous offre un second outil, les <em>assertions</em>.
Les assertions permettent d'installer des points de contrôle dans un programme
pour vérifier que les traitements se passent bien. Ces points de contrôles
seront utilisés pour vérifier les contrats préalablement définis.
Nous les détaillerons dans
<a href="#">le prochain billet</a>.</p>

<h2>II- La programmation par contrat</h2>

<p>Les contrats, dans la programmation, servent à poser les bases de qui est censé
faire quoi. Par exemple, la fonction <code>sqrt(x)</code> ne prend que des paramètres
numériques positifs <em>x</em>, et elle renvoie des nombres toujours positifs qui
vérifient <em>result = x²</em>. On retrouve la notion de <em>domaine de définition</em> des
<em>fonctions</em> en mathématiques.</p>

<p>Dit autrement, si on respecte le contrat d'appel d'une fonction (on parle de
ses <em>pré-conditions</em>), cette fonction est censée nous garantir respecter son
contrat de sortie (on parle de <em>post-conditions</em>). Si les pré-conditions ne
sont pas respectées, les post-conditions (à commencer par le bon déroulement de
la fonction) pourront ne pas être respectées : la fonction est libre de faire
comme elle l'entend.</p>

<p>On peut se demander à quoi ça sert. En effet, si on passe un nombre négatif à
<code>sqrt</code> et qu'elle plante, on n'est pas plus avancés. Le bug est toujours là. Et
pourtant, nous avons fait un énorme pas en avant : nous avons formalisé les
contrats de <code>sqrt</code>. Nous disposons de spécifications précises, et d'une
<a href="##Documentation">documentation</a> qui pourra accompagner le code.</p>

<p>Heureusement, nous pouvons aller bien plus loin. Nous pouvons aussi marquer le
code avec des assertions représentatives des contrats identifiés pour repérer
les ruptures de contrats en phase de tests et développement.</p>

<p>Idéalement, nous aurions dû pouvoir aller beaucoup plus loin. En effet, les
outils d'analyse statique de code devraient pouvoir exploiter les contrats
exprimés avec des assertions pour vérifier qu'ils n'étaient jamais violés
lors de leur exploration des chemins d'exécution possibles.<br/>
Seulement, les quelques outils que j'ai pu regarder utilisent au contraire les
assertions pour retirer des branches à explorer.</p>

<h3>II.1- Les trois contrats de la PpC</h3>

<p>La PpC définit trois contrats :</p>

<h4>Les pré-conditions</h4>

<p>Elles sont le pendant des <em>domaines de définition</em> des fonctions mathématiques.
Si l'état du système vérifie les pré-conditions d'une fonction à l'instant de
son appel, alors la fonction est censée se dérouler correctement et de façon
<em>prévisible</em> (je simplifie).</p>

<p>Typiquement, l'<em>état du système</em> correspondra aux paramètres de la fonction,
qu'ils soient explicites, ou implicites (<code>this</code>), mais aussi à toutes les
globales accessibles.</p>

<h4>Les post-conditions</h4>

<p>Les post-conditions sont les garanties que l'on a sur le résultat d'une fonction
si les pré-conditions sont remplies et que la fonction s'est exécutée
correctement.</p>

<blockquote><p><strong>Important :</strong> Si une fonction voit qu'elle ne pourra pas remplir ses
post-conditions, alors elle <strong>doit</strong> échouer &mdash; de préférence en levant une
exception de <em>runtime</em> en ce qui me concerne.</p></blockquote>

<p>Notez cet emploi du <em>futur</em>. Il ne s'agit pas de vérifier si les calculs ou
l'algorithme est correct en sortie de fonction, mais de vérifier si le contexte
permet bien à la fonction de se dérouler correctement.</p>

<p>Le cas <em>&ldquo;j'ai fait tous mes calculs, ils sont faux, et je ne sais pas
pourquoi&rdquo;</em> ne justifie pas une exception. Il s'agit d'une erreur de
programmation ou de logique.<br/>
Prenons <a href="http://fr.wikipedia.org/wiki/Vil_Coyote">Vil Coyote</a>. Il a un plan
splendide pour attraper Bip Bip &mdash; c'est d'ailleurs la post-condition de son
plan. Il détourne une route pour la faire arriver au pied d'une falaise, et il
peint un tunnel sur le rocher. C'est un algo simple et efficace, Bip Bip
devrait s'écraser sur la roche, et Vil aura son repas. Sauf que. Il y a un bug
avec la peinture qu'il a intégrée (ou avec Bip Bip) : le volatile emprunte le
tunnel. Vous connaissez tous la suite, Vil se lance à sa poursuite et boum. La
post-condition n'est pas respectée car il y a un bug totalement inattendu dans
les pièces que Vil a intégrées. Il n'y avait ici pas de raison de lancer une
exception. La seule exception plausible c'est si Bip Bip venait à ne pas
vouloir emprunter cette route.</p>

<p>Bref, nous le verrons plus loin, et dans le prochain billet, ce cas de bug non
anticipé est mieux traité avec des assertions.</p>

<h4>Les invariants</h4>

<p>Il y a plusieurs natures d'invariants. On va parler d'invariants pour des zones
de codes durant lesquelles une propriété sera vraie :</p>

<ul>
<li>un <em>invariant de boucle</em> correspondra à ce qui est toujours vrai à
l'intérieur de la boucle (p.ex. que <code>i &lt; N</code> dans le cas d'une boucle <code>for</code>) ;
[NdA.: À vrai dire, c'est une appellation que l'on peut voir comme abusive. En
effet, ces invariants peuvent être rompus avant de sortir de la boucle.
Certains préfèrent utiliser le terme de <em>variant de boucle</em> pour désigner une
propriété qui va permettre de sortir de la boucle.]</li>
<li>une variable devrait toujours avoir pour invariant : <em>est utilisable, et est
dans un état cohérent et pertinent</em> ; cet invariant est positionné à la
sortie de son constructeur (<em>cf.</em> FAQ C++ dvpz) ;</li>
<li>un <em>invariant de classe</em> est une propriété toujours observable depuis
du code extérieur aux instances de la classe &mdash; p.ex. une séquence triée garantira
que tous les éléments de la séquence sont toujours ordonnés lorsque le code
utilisant la séquence cherche à y accéder, cependant ponctuellement, le temps
de l'insertion d'un nouvel élément l'invariant de la classe n'a pas à être
vérifié depuis les fonctions internes de la séquence ;</li>
<li>une <em>référence</em> est généralement acceptée en C++ comme un pointeur avec pour
invariant une garantie de non-nullité.</li>
</ul>


<h3>II.2- Acteurs et responsabilités</h3>

<p>Ces contrats son définis entre les acteurs qui interviennent dans l'écriture
d'un code.  On peut dans l'absolu distinguer autant d'acteurs que de fonctions.<br/>
Prenons le bout de code suivant :</p>

<p><code>c++
double metier() {                  // écrit par l'Intégrateur
   const double i = interrogeES(); // écrit par le responsable UI
   return sqrt(i);                 // écrit par le Mathématicien
}
</code></p>

<p>Nous pouvons distinguer trois acteurs :</p>

<ul>
<li>le responsable UI, qui écrit <code>interrogeES</code></li>
<li>le Mathématicien, qui écrit <code>sqrt</code></li>
<li>et l'Intégrateur, qui intègre tout cela ensemble lorsqu'il écrit <code>metier</code>.</li>
</ul>


<p><code>sqrt</code> a un contrat simple : le nombre reçu doit être positif. Si l'appel à
<code>sqrt</code> échoue (plantage, résultat renvoyé aberrant, &hellip;) tandis que le nombre
passé en paramètre est bien positif, alors le Mathématicien est responsable du
problème et ce peu importe ce qui est fait par les autres acteurs. En effet,
bien que les pré-conditions de <code>sqrt</code> sont bien vérifiées, ses post-conditions
ne le sont pas : <code>sqrt</code> ne remplit pas sa part du contrat.</p>

<p>Si <code>i</code> n'est pas positif, alors le Mathématicien ne peut pas être tenu pour
responsable de quoi que ce soit. La faute incombe au code client de <code>sqrt</code>.</p>

<p>À ce stade, tout va dépendre si <code>interrogeES</code> dispose d'une post-condition sur
ses sorties du type <em>renvoie un nombre positif</em>. Si c'est le cas, la rupture de
contrat est alors à ce niveau, et le responsable UI est responsable de l'erreur
de programmation. En effet, l'Intégrateur est dans son droit d'enchainer
<code>sqrt(interrogeES())</code>. C'est exactement la même chose que
<code>sqrt(abs(whatever))</code>, personne n'irait accuser l'Intégrateur de ne pas faire
son boulot vu que les pré-conditions de <code>sqrt</code> sont censées être assurées par
les post-conditions de <code>interrogeES</code>.</p>

<p>En revanche, si <code>interrogeES</code> n'a aucune post-condition telle que le nombre
renvoyé sera positif, alors l'Intégrateur est responsable au moment de l'intégration de
s'assurer que ce qu'il va passer à <code>sqrt</code> soit bien positif. Une correction
typique serait :</p>

<p>```c++
double metier() {                  // écrit par l'Intégrateur
   const double i = interrogeES(); // écrit par le responsable UI
   if (i &lt;0)</p>

<pre><code>   throw std::runtime_error("invalid input obtained ...");
</code></pre>

<p>   return sqrt(i);                 // écrit par le Mathématicien
}
```</p>

<p>Remarquez, que l'Intégrateur est alors face à une erreur de contexte
(/<em>runtime</em>) et nullement face à une erreur de programmation. Il est alors en
droit de lever une exception (souvenez-vous, si une post-condition ne peut pas
être respectée, alors la fonction doit échouer), ou de boucler jusqu'à obtenir
quelque chose qui lui permette de continuer. Sans cela nous aurions été face à
une erreur de programmation commise par l'Intégrateur.</p>

<p>En résumé :</p>

<blockquote><ul>
<li>la responsabilité de vérifier les pré-conditions d'une fonction échoie au
code client, voire indirectement au code qui alimente les entrées de cette
fonction appelée.</li>
<li>la responsabilité de vérifier les post-conditions d'une fonction échoie à
cette fonction appelée.</li>
</ul>
</blockquote>

<p>NB: Jusqu'à présent je considérai seulement deux acteurs relativement aux
responsabilités. C'est Philippe Dunski qui m'a fait entrevoir le troisième
intervenant lors de ma relecture de son livre <a href="#Dunksi2014">[Dunksi2014]</a>.</p>

<h3>II.3- Petite parenthèse sur les contrats commerciaux&hellip; et les licences</h3>

<p>La programmation par contrat n'a pas vocation à avoir des répercutions légales
selon qui ne remplit pas son contrat. Cependant, il y a clairement une
intersection entre la PpC et les responsabilités légales.</p>

<p>Dans le cas où le responsable UI et le Mathématicien sont deux contractants de
l'Intégrateur. Ce que j'ai détaillé au paragraphe précédant est normalement
directement applicable. L'Intégrateur sera responsable vis-à-vis de son client
du bon fonctionnement de l'ensemble, mais le responsable UI et le Mathématicien
ont des responsabilités vis-à-vis de l'Intégrateur.</p>

<p>Si maintenant, le responsable UI ou le Mathématicien ne livrent plus des
<a href="http://en.wikipedia.org/wiki/Commercial_off-the-shelf">COTS</a> (au sens
commercial), mais des bibliothèques tierces OpenSources ou Libres, à moins que
l'Intégrateur ait pris un contrat de maintenance auprès du responsable UI et du
Mathématicien, il est peu probable que le responsable UI ou le Mathématicien
aient la moindre responsabilité légale vis à vis de l'Intégrateur.</p>

<p>L'Intégrateur est seul responsable vis-à-vis de son client. À lui de trouver des
contournements, ou mieux de corriger ces composants tiers qu'il a choisi
d'utiliser, et de reverser les patchs à la communauté.</p>

<p>Mais je m'égare, ceci est une autre histoire.  Revenons à nos moutons.</p>

<h2><a id="ProgrammationDefensive"></a>III- La Programmation Défensive, une philosophie antagoniste ou complémentaire ?</h2>

<p>Il est difficile de traiter de la PpC sans évoquer la <em>Programmation
Défensive</em>. Souvent ces deux approches sont confondues tant la frontière entre
les deux est subtile.</p>

<p><em>Tout d'abord une petite remarque importante, la Programmation Défensive a
d'autres objectifs orthogonaux à ce qui est discuté dans ces billets : elle est
aussi utilisée pour introduire une tolérance aux erreurs matérielles, limiter
les conséquences de ces erreurs (comme les corruptions de mémoire).  C'est un
aspect que je n'aborde pas dans le cadre de la comparaison avec le PpC.</em></p>

<h3>III.1- Présentons la Programmation Défensive</h3>

<p>La <em>Programmation Défensive</em> a pour objectif qu'un programme ne doit jamais
s'arrêter afin de toujours pouvoir continuer. On s'intéresse à la robustesse
d'un programme.</p>

<p>Bien que la PpC puisse être détournée pour faire de la programmation
défensive, ce n'est pas son objectif premier. La PpC ne fait que stipuler que
si un contrat est respecté, alors tout se passera bien. Si le contrat n'est pas
respecté tout peut arriver : on peut assister à des plantages plus ou moins
prévisibles, on peut produire des résultats erronés, on peut stopper
volontairement au point de détection des erreurs, et on peut aussi remonter
des exceptions. Avec la PpC, on s'intéresse à l'écriture de code correct.</p>

<p>Le choix de remonter des exceptions, depuis le lieu de la détection de la
rupture de contrat, est un choix de programmation défensive. C'est un choix que
j'assimile à une déresponsabilisation des véritables responsables.</p>

<p>Supposons une application qui lit un fichier de distances, et qui pour le besoin
de son métier calcule des racines carrées sur ces distances. L'approche de la
<em>programmation défensive</em> consisterait à vérifier dans la fonction <code>my::sqrt</code> que
le paramètre reçu est positif, et à lever une exception dans le cas contraire.</p>

<p>Ce qui donnerait :</p>

<p>```c++
double my::sqrt(double n) {</p>

<pre><code>if (n&lt;0) throw std::domain_error("Negative number sent to sqrt");
return std::sqrt(n);
</code></pre>

<p>}</p>

<p>void my::process(boost::filesystem::path const&amp; file) {</p>

<pre><code>boost::ifstream f(file);
if (!f) throw std::runtime_error("Cannot open "+file.string());
double d;
while (f &gt;&gt; d) {
    my::memorize(my::sqrt(d));
}
</code></pre>

<p>}
```</p>

<p>Si un nombre négatif devait être présent dans le fichier, nous aurions droit à
l'exception <em>&ldquo;Negative number sent to sqrt&rdquo;</em>. Limpide, n'est-ce pas ? On ne sait
pas quel est le nombre, ni d'où il vient. Après une longue investigation pour
traquer l'origine de ce nombre négatif, on comprend enfin qu'il faut
instrumenter <code>process</code> pour intercepter l'exception. Soit on fait le <code>catch</code> au
niveau de la fonction, et on sait dans quel fichier a lieu l'erreur, soit on
encadre l'appel à <code>my::sqrt</code> pour remonter plus d'informations.</p>

<p>```c++
void my::process(boost::filesystem::path const&amp; file) {</p>

<pre><code>boost::ifstream f(file);
if (!f) throw std::runtime_error("Cannot open "+file.string());
double d;
while (f &gt;&gt; d) {
    double sq = 0;
    try {
        sq = my::sqrt(d);
    }
    catch (std::logic_error const&amp;) {
        throw std::runtime_error(
            "Invalid negative distance " + std::to_string(d)
            +" at the "+std::to_string(l)
            +"th line in distances file "+file.string());
    }
    my::memorize(sq);
}
</code></pre>

<p>}
```</p>

<p>Et là &hellip; on fait ce que le code client aurait dû faire dès le début : assurer
que le contrat des fonctions appelées est bien respecté.<br/>
En effet, si on avait embrassé la PpC dans l'écriture de ces deux fonctions, ce
bout de code aurait ressemblé à :</p>

<p>```c++
double my::sqrt(double n) {</p>

<pre><code>assert(n&gt;=0 &amp;&amp; "sqrt can't process negative numbers");
return std::sqrt(n);
</code></pre>

<p>}</p>

<p>void my::process(boost::filesystem::path const&amp; file) {</p>

<pre><code>boost::ifstream f(file);
if (!f) throw std::runtime_error("Cannot open "+file.string());
double d;
for (std::size_t l = 1 ; f &gt;&gt; d ; ++l) {
    if (d &lt;= 0) 
        throw std::runtime_error(
            "Invalid negative distance " + std::to_string(d)
            +" at the "+std::to_string(l)
            +"th line in distances file "+file.string());
    my::memorize(my::sqrt(d));
}
</code></pre>

<p>}
<code>``
Cela n'est-il pas plus simple et propre pour disposer d'un message non
seulement plus explicite, mais surtout bien plus utile ? Comparez ce nouveau
message *"Invalid negative distance -28.15 at the 42th line of distances file
distances.txt"*, au précédent *"Negative number sent to sqrt"*.  
Notez que l'on pourrait aussi critiquer l'impact en termes de performances de
la solution précédente (avec le</code>catch<code>). Un</code>catch` n'est pas si gratuit que
cela &mdash; a contrario du <em>Stack Unwinding</em>.</p>

<h3>III.2- Des objections ?</h3>

<p>Il est des objections classiques à l'utilisation de la PpC en terrain où la
Programmation Défensive occupe déjà la place. Décortiquons-les.</p>

<h4><em>&ldquo;-On utilise l'une ou l'autre&rdquo;</em></h4>

<p>Oui et non. Si la PpC s'intéresse à l'écriture de code correct, la
Programmation Défensive s'intéresse à l'écriture de code robuste. Certes
l'objectif premier n'est pas le même (dans un cas on essaie de repérer et
éliminer les erreurs de programmation, dans l'autre on essaie de ne pas planter
en cas d'erreur de programmation), mais les deux techniques peuvent se
compléter.<br/>
D'abord on élimine les bugs, ensuite on essaie de résister aux bugs
récalcitrants.</p>

<p>À vrai dire, on peut utiliser simultanément ces deux approches sur de mêmes
contrats. En effet, il est possible de modifier la définition d'une assertion
en mode <em>Release</em> pour lui faire lever une exception de logique. En mode
<em>Debug</em> elle nous aidera à contrôler les enchainements d'opérations</p>

<p>Ce qui indubitable, c'est qu'en cas de certitude qu'il n'y a pas d'erreur de
programmation sur des enchainements de fonctions, alors il n'y a pas besoin de
test dynamique sur les entrées des fonctions.<br/>
Reste que toute la difficulté réside dans comment être certains qu'une séquence
d'opérations est exempte de bugs.</p>

<h4><em>&ldquo;&ndash; La PpC éparpille les vérifications alors que la Programmation Défensive les factorise.&rdquo;</em></h4>

<p>Il est vrai que la Programmation Défensive permet d'une certaine façon de
centraliser et factoriser les vérifications. Mais les vérifications ainsi
centralisées ne disposent pas du contexte qui permet de remonter des erreurs
correctes. Il est nécessaire d'enrichir les exceptions pauvres en les
transformant au niveau du code client, et là on perd les factorisations.<br/>
D'où la question légitime que l'on est en droit de se poser : <em>&ldquo;Mais pourquoi ne
pas faire ce que le code client était censé faire dès le début ? Pourquoi ne
pas vérifier les pré-conditions des fonctions que l'on va appeler, avant de les
appeler ?&rdquo;</em></p>

<p>Ensuite, il est toujours possible de factoriser grâce aux assertions. Si en
mode <em>Release</em> les assertions lèvent des exceptions, alors factorisation il y
a.</p>

<p>Ce qui me gêne avec cette <em>factorisation</em>, c'est que l'on mélange les problèmes
de <em>runtime</em> avec les erreurs de programmation ou de logique. J'aime bien le
<a href="http://en.wikipedia.org/wiki/Single_responsibility_principle"><em>Single Responsability Principle (SRP)</em></a>,
mais là, j'ai la franche impression que l'on mélange les responsabilités des
vérifications.<br/>
De fait, on commence à avoir des systèmes aux responsabilités de plus en plus
confuses.</p>

<p>De plus, cette factorisation implique de toujours vérifier dynamiquement ce qui
est garantit statiquement. D'autant que idéalement s'il n'y a pas d'erreur de
programmation, alors il n'y a pas de test à faire dans les cas où le <em>runtime</em>
n'a pas à être vérifié.<br/>
Quel sens il y a-t-il à écrire ceci ?</p>

<p>```c++
for (std::size_t i=0, N=vect.size(); i!=N ; ++i)</p>

<pre><code>f(vect.at(i));
</code></pre>

<p>// ou de vérifier la positivité des paramètres de sqrt() dans
sqrt(1-sin(x))
```</p>

<h4><em>&ldquo;-Le mode Debug ne doit pas se comporter différemment du mode Release!&rdquo;</em></h4>

<p>Remontons à l'origine de cette exigence pour mieux appréhender son impact sur
la PpC telle que je vous la propose (avec des assertions).</p>

<p>Parfois, le mode <em>Debug</em> est plus permissif que le mode <em>Release</em> : il cache
des erreurs de programmation. Souvent c'est du à des outils (comme VC++) dont le mode
<em>Debug</em> zéro-initialise des variables même quand le code néglige de les
initialiser.</p>

<p>Avec des assertions, c'est tout le contraire. En effet, le mode <em>Debug</em> ne sera
pas plus permissif, mais au contraire il sera plus restrictif et intransigeant
que le mode <em>Release</em>. Ainsi, si un test passe en mode <em>Debug</em>, il passera
également en mode <em>Release</em> (relativement aux assertions) : si le test est OK,
c'est que les assertions traversées ne détectent aucune rupture de contrat en
<em>Debug</em>, il n'y aurait aucune raison qu'il en aille autrement en <em>Release</em>.
A contrario, un test qui finit en <em>coredump</em> en <em>Debug</em> aurait pu tomber en
marche en <em>Release</em>, comme planter de façon plus ou moins compréhensible (plutôt
moins en général).<br/>
Ce qui est sûr, c'est qu'en phase de développement et de tests, les
développeurs auraient vu l'erreur de programmation et ils auraient dû la
corriger pour voir le test passer.</p>

<h4><em>&ldquo;&ndash; La programmation Défensive est plus adaptée aux développeurs inexpérimentés.&rdquo;</em></h4>

<p>C'est possible. On ne réfléchit pas avant. On code et on voit ensuite ce qu'il
se passe. Traditionnellement, les débutants tendent à être formés de la sorte.</p>

<p>Seulement, on complexifie grandement la base de code avec cette approche.
Les erreurs (de programmations et logiques) sont mélangées aux cas dégradés du
<em>runtime</em>. Nous avons une vision plus floue, des fonctions plus complexes qui
propagent et rattrapent des exceptions qui ne sont censées se produire.<br/>
Bref, nous avons une logique d'ensemble plus difficile à maîtriser.</p>

<p>Les cas dégradés induits par nos métiers complexifient déjà grandement les
applications. Rajouter au milieu du code de gestion des erreurs de
programmation complexifie encore plus les systèmes. D'ailleurs, ne
rajoutent-ils pas de nouveaux risques de bugs ?</p>

<p>De fait, je me pose sincèrement la question : en voulant rendre plus
accessibles nos systèmes à des développeurs inexpérimentés, ne faisons-nous pas
le contraire ?</p>

<p>À noter aussi aussi que le diagnostic des erreurs de <em>runtime</em> ou de logique
est plus pauvre avec la <em>factorisation</em> de la Programmation Défensive. Et de
fait, on complexifie les tâches d'investigation des problèmes vu que l'on
déresponsabilise les véritables responsables.</p>

<h3>III.3- En résumé</h3>

<p>Sinon, voici mes conclusions personnelles sur le sujet :</p>

<ul>
<li>La PpC s'intéresse à l'écriture de codes corrects. La Programmation Défensive
s'intéresse à l'écriture de codes qui restent robustes dans le cas où ils ne
seraient pas corrects.</li>
<li>Philosophiquement, je préfère 100 fois la PpC à la Programmation Défensive :
il faut assumer nos responsabilités et ne pas décharger nos utilisateurs de
leurs devoirs.</li>
<li>Toutefois, il est possible de détourner la PpC  basée sur des assertions en C
et C++ pour faire de la Programmation Défensive ; p.ex. l'assertion pourrait
être détournée en <em>Release</em> pour lever une exception. J'y reviendrai dans le
<a href="#">prochain billet</a>.</li>
</ul>


<h3>III.4- Comment reconnaitre des contrats ?</h3>

<p>Il est important de le rappeler, les contrats tels que présentés ici sont
orientés vers la recherche des erreurs de programmation. C'est à dire, un code
qui ne respecte pas les contrats de ses divers constituants présente une erreur
de programmation.</p>

<p>En aucun cas une violation de contrat correspondra à une situation
exceptionnelle (et plausible), <em>cf.</em> <a href="#Wilson2006">[Wilson2006]</a></p>

<p>Il est également à noter qu'une vérification de contrat devrait pouvoir être
retirée d'un code source sans que son comportement ne soit impacté. En effet,
un programme dépourvu d'erreur de logique n'aura aucun contrat qui se fasse
violer, et la vérification devient superflue.</p>

<h2>IV- Parenthèse OO : PpC &amp; <em>Principe de Substitution de Liskov</em> (LSP)</h2>

<p>Je ne rentrerai pas dans les détails du LSP. Je vous renvoie plutôt à la
<a href="http://cpp.developpez.com/faq/cpp/?page=L-heritage#Qu-est-ce-que-le-LSP">FAQ C++ de développez</a>,
ou à <a href="#Dunksi2014">[Dunksi2014]</a>. Il faut retenir que le LSP est un outil qui
permet d'éviter de définir des hiérarchies de classes qui se retourneront
contre nous.</p>

<p>Le LSP est formulé relativement aux contrats des classes pour établir quand une
classe peut dériver (publiquement en C++) en toute quiétude d'une autre.
Le principe est que :</p>

<ul>
<li>les pré-conditions ne peuvent être qu'affaiblies, ou laissées telles quelles,</li>
<li>les post-conditions ne peuvent être que renforcées, ou laissées telles
quelles,</li>
<li>et une classe fille ne peut qu'ajouter des invariants.</li>
</ul>


<p>Dit comme cela, cela peut paraitre abscons, et pourtant c'est très logique.</p>

<h4>Quelques exemples</h4>

<p>Prenons par exemple, une compagnie aérienne. Elle a des pré-requis sur les
bagages acceptés sans surcouts. Pour toutes les compagnies, un bagage de
50x40x20cm sera toujours accepté. En particulier, chez les compagnies
low-costs. En revanche, les grandes compagnies historiques (et non low-costs)
affaiblissent cette pré-condition : on peut se s'enregistrer avec un bagage
bien plus gros sans avoir à payer de supplément (certes il partira en soute).<br/>
Il en va de même pour les post-conditions : nous n'avons aucune garantie
d'estomac rempli sans surcouts une fois à bord de l'avion. Sauf chez les
compagnies traditionnelles qui assurent en sortie un estomac non vide.<br/>
On peut donc dire a priori qu'une compagnie low-cost est une compagnie, de même
qu'une compagnie traditionnelle.</p>

<p>Côté invariants, un rectangle immuable a tous ses côtés perpendiculaires, un
carré immuable a en plus tous ses côtés de longueur égale.</p>

<p>Parmi les conséquences du LSP, on pourra déduire qu'une <em>liste triée</em> n'est pas
substituable à une <em>liste</em>, ou qu'un <em>carré non immuable</em> n'est pas un
<em>rectangle non immuable</em>. Je vous renvoie à la littérature et/ou la FAQ pour
plus d'informations sur le sujet.</p>

<h2>V- Remerciements</h2>

<p>Un grand merci à tous mes relecteurs, correcteurs et détracteurs. J'ai nommé:
Julien Blanc,
Guilhem Bonnefille,
David Côme,
Sébastien Dinot,
Iradrille,
Philippe Lacour,
Cédric Poncet-Montange</p>

<h2>VI- Références</h2>

<p>[<em>NdA: Je réorganiserai les liens au fur et à mesure des sorties des articles</em>]</p>

<ul>
<li><a id="Meyer1988"> </a>[Meyer2000] &mdash; <a href="http://www.editions-eyrolles.com/Livre/9782212122701/conception-et-programmation-orientees-objet"><em>Conception et programmation orientées objet</em></a> de Bertrand Meyer, Eyrolles, 1988, Seconde Édition parue en 2000</li>
<li><a id="Dunksi2014"></a>[Dunksi2014] &mdash; <a href="http://www.d-booker.fr/programmation-et-langage/157-coder-efficacement.html"><em>Coder Efficacement &mdash; Bonnes pratiques et erreurs à éviter (en C++)</em></a> de Philippe Dunski, D-Booker, Février 2014</li>
<li><a id="IPCpp"></a>[Wilson2004] &mdash; <em>Imperfect C++</em> de Matthew Wilson, Addisson-Wesley Professionnal, Octobre 2004.</li>
<li><a id="Wilson2006"></a>[Wilson2006] &mdash; <a href="http://www.artima.com/cppsource/deepspace3.html"><em>Contract Programming 101</em></a>, Matthew Wilson, artima, Janvier 2006.</li>
<li><a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3753.pdf">n3753</a></li>
<li>Billets d'Andrzej<br/>
Il s'agit là d'une excellente série d'articles/billets sur la PpC.

<ul>
<li><a href="http://akrzemi1.wordpress.com/2013/01/04/preconditions-part-i/">http://akrzemi1.wordpress.com/2013/01/04/preconditions-part-i/</a></li>
<li><a href="http://akrzemi1.wordpress.com/2013/02/11/preconditions-part-ii/">http://akrzemi1.wordpress.com/2013/02/11/preconditions-part-ii/</a></li>
<li><a href="http://akrzemi1.wordpress.com/2013/03/13/preconditions-part-iii/">http://akrzemi1.wordpress.com/2013/03/13/preconditions-part-iii/</a></li>
<li><a href="http://akrzemi1.wordpress.com/2013/04/18/preconditions-part-iv/">http://akrzemi1.wordpress.com/2013/04/18/preconditions-part-iv/</a></li>
</ul>
</li>
<li>Autres articles

<ul>
<li><a href="http://www.drdobbs.com/when-and-how-to-use-exceptions/184401836"><em>When and How to Use Exception</em></a>, Herb Sutter, August 01, 2004</li>
<li><a href="http://blog.regehr.org/archives/1091">http://blog.regehr.org/archives/1091</a></li>
<li><a href="http://pempek.net/articles/2013/11/16/assertions-or-exceptions/">http://pempek.net/articles/2013/11/16/assertions-or-exceptions/</a></li>
<li><a href="http://pempek.net/articles/2013/11/17/cross-platform-cpp-assertion-library/">http://pempek.net/articles/2013/11/17/cross-platform-cpp-assertion-library/</a></li>
<li><a href="http://julien-blanc.developpez.com/articles/cpp/Programmation_par_contrat_cplusplus/"><em>Programmation par contrat, application en C++</em></a>, de Julien Blanc, 14 décembre 2009<br/>
Vous trouverez d'autres explications et d'autres techniques dans son
article.</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le C++ Moderne]]></title>
    <link href="http://LucHermitte.github.io/blog/2012/04/04/le-c-plus-plus-moderne/"/>
    <updated>2012-04-04T11:44:47+02:00</updated>
    <id>http://LucHermitte.github.io/blog/2012/04/04/le-c-plus-plus-moderne</id>
    <content type="html"><![CDATA[<p><em>Billet initialement posté sur <a href="https://thor.si.c-s.fr/blogs/cs2/#urn:md5:a7dc48a340cd43c09c1180dd99234483">mon blog du boulot</a></em></p>

<p>Suite à la grille que j'avais donnée dans mon <a href="https://thor.si.c-s.fr/blogs/cs2/#urn:md5:4bdf150032f41bbea81a4ee4a259d522">précédent billet</a>, deux questions fort pertinentes m'ont été posées :</p>

<blockquote><p>Que signifie «simple» ?
De même «C++ moderne» concerne la syntaxe ?</p></blockquote>

<h2>De la simplicité</h2>

<p><em>Hum &hellip; est-il simple de définir la simplicité ? Voyons voir. Ah! Même la page
wiki du <a href="http://en.wikipedia.org/wiki/KISS_principle">principe du KISS</a> n'élabore pas sur le sujet. Bon.</em></p>

<p>J'estime qu'un code est simple quand il résout, correctement, un problème en
peu de lignes, et qu'il demande peu d'énergie pour comprendre ce qu'il fait des
mois plus tard quand on a besoin de le relire, voire de le maintenir.</p>

<p>Un exemple facile serait par exemple un code C qui lit depuis un fichier un
nombre de lignes inconnu à l'avance et le même code en C++. La version robuste
(qui prend en compte les éventuels problèmes) est vite complexe en C. En effet,
en C il faut gérer manuellement les réallocations pour chaque ligne lue, mais
aussi pour le tableau de lignes. Le C++, mais aussi glibc, fournissent des
<em>primitives</em> dédiées qui épargnent au développeur de devoir réinventer la roue.
Cf l'article de Bjarne Stroustrup: <a href="http://www.research.att.com/~bs/new_learning.pdf">Learning C++ as a new language</a>.</p>

<p>On touche au paradoxe de la simplicité entre le C et le C++. Le C qui ne
dispose uniquement que des briques élémentaires (relativement à la gestion de
la mémoire et des chaines &mdash; et encore) est plus simple que le C++. Pourtant le
C++ qui offre des encapsulations de ces briques élémentaires permet de produire
plus simplement du code robuste.</p>

<p>Quel est le rapport avec les bibliothèques C++ de manipulation de documents XML
? Et bien, je vous invite à comparer la manipulation de chaines de caractères
de Xerces-C++ avec les autres bibliothèques plus modernes.</p>

<h2>Le C++ Moderne</h2>

<p>Pour comprendre ce qu'est le <em>C++ Moderne</em>, il faut d'abord voir ce qu'est le <em>C++ historique</em>.</p>

<h3>Le C++ Historique</h3>

<p>Un majorité écrasante, et regrettable, de ressources pédagogiques sur le C++
suit ce que l'on appelle aujourd'hui une approche historique. « Le C++ descend
du C, il est donc logique d'enseigner le C avant le C++ ». Après tout nous
enseignons le latin avant le français à nos enfants, non ? Certes, cette
comparaison, comme bien des comparaisons, est fallacieuse, mais posons-nous
tout de même la question : où est le mal à enseigner itérativement du C vers le
C++ ? Au delà de l'aspect pédagogique qui nous fournit des abstractions plus
simples à manipuler sur ce plan pédagogique, le soucis est dans les habitudes
qui seront prises.</p>

<p>Le C++ historique est un C++ où la bibliothèque standard ne mérite pas mieux
qu'une note en annexe d'un cours, chose qui pousse à réinventer la roue et à
verser dans le syndrome du
<a href="http://en.wikipedia.org/wiki/Not_invented_here">NIH</a>. C'est un C++ dont les
idiomes sont maîtrisés approximativement – assez logiquement, les cours
modernisés sont plus au fait de l'état de l'art en matière d'idiomes C++. Mais
c'est aussi et surtout un C++ où la gestion des erreurs est confiée à des codes
de retour, comme en C.</p>

<p>Souvent nous le savons que trop bien, le développeur est vite laxiste et ne
teste pas toutes les fonctions qui peuvent échouer pour traiter les cas
dégradés. À commencer par les erreurs de type « mémoire saturée ». Un tel code
cavalier dans sa gestion des erreurs ressemblerait à ceci :</p>

<p>```cpp</p>

<pre><code>NotifyIcon* CreateNotifyIcon()
{
    NotifyIcon* icon = new NotifyIcon();
    icon.set_text("Blah blah blah");
    icon.set_icon(new Icon(...), GetInfo());
    icon.set_visible(true);
    return icon;
}
</code></pre>

<p>```</p>

<p>Sauf que … le C++ peut lever des exceptions. C'est le comportement par défaut
des allocations de mémoire en C++, des types standards qui nous simplifient
grandement la gestion des chaînes de caractères et des tableaux
redimensionnables, des listes chaînées, des tables associatives, etc. Des COTS
peuvent aussi lever des exceptions à notre insu. Les exceptions doivent donc
être prises en compte. De plus, il est envisageable que plusieurs des fonctions
invoquées ci-dessus puissent échouer, le code précédent ne le prenait pas en
compte. Supposons que les échecs soient notifiés par des exceptions, et tâchons
de corriger le code précédent.</p>

<p>Une version corrigée pourrait ressembler à ceci :</p>

<p>```cpp</p>

<pre><code>NotifyIcon* CreateNotifyIcon()
{
    NotifyIcon* icon = new NotifyIcon();
    try {
        icon.set_text("Blah blah blah");
        icon.set_visible(true);
        Info info = GetInfo();
        icon.set_icon(new Icon(...), info);
    } catch (...) {
        delete icon; throw;
    }
    return icon;
}
</code></pre>

<p>```</p>

<p>Il semblerait que nous ayons fini. Et pourtant ce tout petit code est juste inmaintenable.</p>

<p>Que se passe-t-il si <code>set_icon</code> lève une exception ? Sommes nous certains que l'icône passée sera bien libérée ?
Pouvons-nous changer de place sans risques le <code>set_icon</code> ? Même si un jour la copie du <code>GetInfo</code> lève à son tour une exception ?
Et si nous rajoutions une troisième ressource, comment faire pour nettoyer correctement derrière nous ?
Bienvenu dans l'enfer de la gestion des ressources et du traitement des cas
dégradés du C/C++ ! On aurait pu croire que ce code anodin soit simple à
corriger avec un petit <em>catch</em>, ce n'est pourtant pas le cas.</p>

<p>NB: Ces codes proviennent de deux articles, un de Raymond Chen, et sa réponse
par Aaron Lahman, au sujet de l'audit de codes dont le sujet est de savoir quel
style est le plus propice à repérer rapidement des codes incorrects. La
traduction de la réponse est disponible à l'adresse suivante :
<a href="http://alexandre-laurent.developpez.com/cpp/retour-fonctions-ou-exceptions/">http://alexandre-laurent.developpez.com/cpp/retour-fonctions-ou-exceptions/</a>.</p>

<p>Vous trouverez dans l'article une version corrigée du code qui repose sur les
codes de retour, avec un <code>if</code> toutes les deux lignes en moyenne pour remonter
les erreurs, et restituer les ressources.</p>

<h3>Le C++ Moderne</h3>

<p>La solution aux problèmes du C++ historique réside dans le C++ moderne.
Décryptons cette tautologie.</p>

<p>Oui le C++ est extrêmement complexe, personne ne prétend d'ailleurs le
maîtriser dans sa totalité, et l'avènement du C++11 n'est pas fait pour
améliorer les choses. Et pourtant, paradoxalement le C++ est plus simple à
utiliser que ce que l'on peut croire. Il s'agit d'accepter de revoir notre
façon de penser la gestion des cas dégradés. Là où la tradition nous pousse à
envisager tous les chemins d'exécution possibles, ce qui a vite fait
d'exploser, l'approche moderne nous pousse à surveiller toutes les ressources
qui devront être restituées.</p>

<p>Pour cela on a recourt à une spécificité du C++ : tout objet local sera
implicitement détruit en sortie de la portée où il vit, et ce quelque soit le
chemin (propre &mdash; i.e. suite à un return ou une exception levée) qui conduit à
l'extérieur de cette portée. Si l'on veut être pédant, ce comportement
déterministe répond à l'appellation <em>Resource Finalization is Destruction idiom</em>
(RFID). Mais généralement on se contente de l'appeler
<a href="http://cpp.developpez.com/faq/cpp/?page=pointeurs#POINTEURS_raii"><em>Resource Acquisition is Initialization idiom</em></a>
(RAII) car le principe est qu'une ressource à peine est-t-elle allouée, elle
doit aussitôt être confiée à une capsule RAII qui assurera sa libération
déterministe.</p>

<p>Le standard C++98/03 n'offre qu'une seule capsule RAII généraliste, mais elle
est assez limitée et elle vient avec des effets de bord indésirables pour les
non-avertis. Il est toutefois facile de trouver des <em>scoped guards</em> prêts à
l'emploi, à commencer par chez <a href="http://www.boost.org/">boost</a>. Toutes les
collections standards suivent le principe du RAII ; ce qui explique pourquoi le
type <code>std::string</code> est si vite adopté par les développeurs, et pourquoi on
cherche à orienter vers des <code>std::vector&lt;&gt;</code> pour gérer des tableaux. Le dernier
standard paru en 2011 introduit enfin des scoped guards standards et sains, et
des types dans la continuité du RAII : des pointeurs dit intelligents.</p>

<p>Ainsi, si nous reprenons l'exemple de la section précédente, le code devient une fois corrigé :</p>

<p>```cpp</p>

<pre><code>shared_ptr&lt;NotifyIcon&gt; CreateNotifyIcon()
{
    shared_ptr&lt;NotifyIcon&gt; icon(new NotifyIcon());
    icon-&gt;set_text("Blah blah blah");
    shared_ptr&lt;Icon&gt; inner( new Icon(...) );
    icon-&gt;set_icon(inner, GetInfo());
    icon-&gt;set_visible(true);
    return icon;
}
</code></pre>

<p>```</p>

<p>Ou en version C++14 :</p>

<p>```cpp</p>

<pre><code>// Ou en version C++14
unique_ptr&lt;NotifyIcon&gt; CreateNotifyIcon()
{
    auto icon {make_unique&lt;NotifyIcon&gt;()};
    icon-&gt;set_text("Blah blah blah");
    auto inner {make_unique&lt;Icon&gt;(...)};
    icon-&gt;set_icon(move(inner), GetInfo());
    icon-&gt;set_visible(true);
    return icon;
}
</code></pre>

<p>```</p>

<p>Peu importe si les fonctions appelées échouent, peu importe si elles viennent à
être réordonnées, nous avons la certitude que <code>inner</code> sera libérée (ou confié à
<code>icon</code>), et que <code>icon</code> sera libérée en cas de soucis, ou retournée dans le cas
nominal.</p>

<p>Il est intéressant de noter que le RAII est applicable non seulement avec un
code construit avec des exceptions, mais aussi avec un code continuant à
fonctionner avec des codes de retour pour assurer la propagation des erreurs.</p>

<p>À vrai dire bien qu'il s'agisse d'une spécificité du C++, les autres langages
pourvus d'exceptions disposent généralement d'un équivalent avec le
<a href="http://en.wikipedia.org/wiki/Dispose_pattern"><em>dispose-pattern</em></a>
(<code>try</code>&ndash;<code>catch</code>&ndash;<code>finally</code>) qui permet d'obtenir le même comportement
mais de façon explicite et non plus implicite. Si en plus ce langage est pourvu
d'un garbage collector, la gestion de la mémoire est encore gérée autrement
alors que le C++ nous oriente vers une solution unique pour gérer toutes les
ressources, sans distinctions. Il est aussi à noter que C# fut le premier des
descendants mainstream du C++ à introduire une alternative implicite et
déterministe au dispose-pattern via le mot clé <code>using</code>, et Java s'y est également
mis avec l'introduction des
<a href="http://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html"><em>try-with-resources</em></a>
dans sa version 7.</p>

<p>NB : Pour certains, « C++ moderne » pourrait rimer avec méta-programmation
template et autres joyeusetés très puissantes et vite arcaniques qui sont au
cœur du projet qui sert de laboratoire aux évolutions de la bibliothèque
standard : boost. Certes, c'est une utilisation moderne du langage, d'une
certaine façon, mais ce n'est pas la modernité que l'on attend du simple
développeur lambda d'applications. Il est attendu de lui qu'il puisse écrire
simplement du code qui réponde aux besoins ; la robustesse et la maintenabilité
étant deux des besoins implicites. Suivre l'«approche moderne» décrite
précédemment est un premier pas dans cette direction.</p>

<p>Le C++ moderne, c'est aussi la bibliothèque standard, qui non seulement est
dans la continuité du RAII, mais qui aussi fournit des outils génériques à des
besoins récurrents (collections, algorithmes, chaînes de caractères
simplifiées) et pas seulement ces flux rigolos avec des <code>&lt;&lt;</code> et des <code>&gt;&gt;</code>.</p>

<p>Le C++ moderne, c'est aussi l'application d'idiomes (/patterns) modernisés. Par
exemple, exit le test pour prévenir l'auto-affectation qui ne garantit pas
l'<em>exception-safety</em>, mais bonjour l'idiome
<a href="http://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Copy-and-swap"><em>copy-and-swap</em></a>.
Le C++ moderne c'est une nouvelle façon de penser en C++ qui implique une
nouvelle façon d'enseigner le C++.</p>

<p>Malgré cela, le C++ reste complexe sur bien des points très techniques (comment
changer son allocateur, comment écrire des méta-programmes template, etc.) en
plus des points hérités du C. Il introduit aussi la complexité de la
modélisation objet, à commencer par le Principe de <a href="http://cpp.developpez.com/faq/cpp/?page=heritage#heritage_lsp"><em>Substitution de Liskov</em></a> (LSP)
qui est une pierre angulaire pour savoir quand on peut hériter, ou encore la
<a href="http://blog.emmanueldeloget.com/index.php?post/2007/02/15/50-la-loi-de-demeter"><em>Loi de Déméter</em></a>
qui cherche à nous enseigner la différence entre faire soit même et déléguer.
Il introduit aussi des choses assez spécifiques comme la distinction entre la
<a href="http://cpp.developpez.com/faq/cpp/?page=classes#CLASS_valeur"><em>sémantique de valeur</em></a> et la
<a href="http://cpp.developpez.com/faq/cpp/?page=classes#CLASS_entite"><em>sémantique d'entité</em></a> à
cause de sa dualité quant aux accès directs ou indirects aux objets.</p>

<p>Et à aucun moment le C++98/03 n'adresse la question de la programmation
concurrente ou parallèle.</p>

<h3>Addendum post C++11 (EDIT de mars 2014)</h3>

<p>L'arrivée des compilateurs C++11, voire C++14 peut jouer sur la définition de
<em>moderne</em> dans le cadre du C++. Jusqu'à lors, la distinction
<em>moderne</em>/<em>historique</em> se limitait à C++ à la C VS C++ 98/03 avec bonnes
pratiques dont le RAII. Le C++11 entérine les pointeurs intelligents, mais il
apporte aussi son lot d'autres simplifications comme <code>auto</code>, les
<em>range-based for loops</em>, ou de fonctionnalités comme les lambdas.</p>

<p>Mon appréciation de la pratique du C++ à la sortie de l'école, et en industrie,
est telle que même à l'orée du C++14, je continue à employer <em>moderne</em> dans le
sens de <em>avec RAII</em>, et pas encore dans le sens: C++11/14 en opposition au
C++98/03 avec les bonnes pratiques associées.</p>

<h2>Conclusion</h2>

<p>Votre serviteur a profité de sa soutenance N3 <em>[NdA: Les «experts» soutiennent
sur un sujet en rapport avec leur domaine dans ma boite pour faire reconnaitre
leur status.]</em> pour reprendre un chapitre du mémoire qui répondait à la
question «C'est quoi le C++ moderne ?». J'espère avoir répondu à la question,
mais surtout de vous avoir convaincu de la nécessité de cesser de surveiller
tous les chemins possibles dans un code pour à la place surveiller toutes les
ressources manipulées.</p>
]]></content>
  </entry>
  
</feed>
